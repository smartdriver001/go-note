// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//发送消息 请求结构体
type SendRequest struct {
	Flag                 string   `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag"`
	UserId               int64    `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id"`
	ToUserId             int64    `protobuf:"varint,3,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id"`
	Content              string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (m *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(m, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *SendRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SendRequest) GetToUserId() int64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func (m *SendRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

//发送消息 响应结构体
type SendReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendReply) Reset()         { *m = SendReply{} }
func (m *SendReply) String() string { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()    {}
func (*SendReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *SendReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendReply.Unmarshal(m, b)
}
func (m *SendReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendReply.Marshal(b, m, deterministic)
}
func (m *SendReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendReply.Merge(m, src)
}
func (m *SendReply) XXX_Size() int {
	return xxx_messageInfo_SendReply.Size(m)
}
func (m *SendReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendReply proto.InternalMessageInfo

func (m *SendReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SendReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//接受消息 请求结构体
type ReceiveRequest struct {
	Flag                 string   `protobuf:"bytes,1,opt,name=flag,proto3" json:"flag"`
	ToUserId             int64    `protobuf:"varint,2,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveRequest) Reset()         { *m = ReceiveRequest{} }
func (m *ReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*ReceiveRequest) ProtoMessage()    {}
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{2}
}

func (m *ReceiveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveRequest.Unmarshal(m, b)
}
func (m *ReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveRequest.Marshal(b, m, deterministic)
}
func (m *ReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveRequest.Merge(m, src)
}
func (m *ReceiveRequest) XXX_Size() int {
	return xxx_messageInfo_ReceiveRequest.Size(m)
}
func (m *ReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveRequest proto.InternalMessageInfo

func (m *ReceiveRequest) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *ReceiveRequest) GetToUserId() int64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

//接受消息
type ReceiveData struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	ToUserId             int64    `protobuf:"varint,2,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveData) Reset()         { *m = ReceiveData{} }
func (m *ReceiveData) String() string { return proto.CompactTextString(m) }
func (*ReceiveData) ProtoMessage()    {}
func (*ReceiveData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{3}
}

func (m *ReceiveData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveData.Unmarshal(m, b)
}
func (m *ReceiveData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveData.Marshal(b, m, deterministic)
}
func (m *ReceiveData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveData.Merge(m, src)
}
func (m *ReceiveData) XXX_Size() int {
	return xxx_messageInfo_ReceiveData.Size(m)
}
func (m *ReceiveData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveData.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveData proto.InternalMessageInfo

func (m *ReceiveData) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReceiveData) GetToUserId() int64 {
	if m != nil {
		return m.ToUserId
	}
	return 0
}

func (m *ReceiveData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ReceiveReply struct {
	DataList             []*ReceiveData `protobuf:"bytes,1,rep,name=data_list,json=dataList,proto3" json:"data_list"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReceiveReply) Reset()         { *m = ReceiveReply{} }
func (m *ReceiveReply) String() string { return proto.CompactTextString(m) }
func (*ReceiveReply) ProtoMessage()    {}
func (*ReceiveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{4}
}

func (m *ReceiveReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveReply.Unmarshal(m, b)
}
func (m *ReceiveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveReply.Marshal(b, m, deterministic)
}
func (m *ReceiveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveReply.Merge(m, src)
}
func (m *ReceiveReply) XXX_Size() int {
	return xxx_messageInfo_ReceiveReply.Size(m)
}
func (m *ReceiveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveReply proto.InternalMessageInfo

func (m *ReceiveReply) GetDataList() []*ReceiveData {
	if m != nil {
		return m.DataList
	}
	return nil
}

func init() {
	proto.RegisterType((*SendRequest)(nil), "chat.SendRequest")
	proto.RegisterType((*SendReply)(nil), "chat.SendReply")
	proto.RegisterType((*ReceiveRequest)(nil), "chat.ReceiveRequest")
	proto.RegisterType((*ReceiveData)(nil), "chat.ReceiveData")
	proto.RegisterType((*ReceiveReply)(nil), "chat.ReceiveReply")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xbd, 0x4f, 0x83, 0x40,
	0x14, 0x97, 0x82, 0x50, 0x1e, 0xc6, 0x8f, 0x17, 0xa3, 0xc4, 0x38, 0x10, 0x26, 0x06, 0xc3, 0x50,
	0xd3, 0xd5, 0x41, 0x5d, 0x4c, 0x9c, 0xae, 0x71, 0x95, 0x9c, 0x70, 0xb6, 0x24, 0x08, 0x78, 0xf7,
	0x68, 0xd2, 0xff, 0xde, 0xdc, 0x15, 0x0c, 0x98, 0xd8, 0xed, 0x7d, 0xf0, 0xfb, 0xe2, 0x1d, 0x40,
	0xbe, 0xe1, 0x94, 0xb6, 0xb2, 0xa1, 0x06, 0x1d, 0x5d, 0xc7, 0x12, 0x82, 0x95, 0xa8, 0x0b, 0x26,
	0xbe, 0x3b, 0xa1, 0x08, 0x11, 0x9c, 0xcf, 0x8a, 0xaf, 0x43, 0x2b, 0xb2, 0x12, 0x9f, 0x99, 0x1a,
	0xaf, 0xc1, 0xeb, 0x94, 0x90, 0x59, 0x59, 0x84, 0xb3, 0xc8, 0x4a, 0x6c, 0xe6, 0xea, 0xf6, 0xa5,
	0xc0, 0x5b, 0x00, 0x6a, 0xb2, 0x61, 0x67, 0x9b, 0xdd, 0x9c, 0x9a, 0xb7, 0xfd, 0x36, 0x04, 0x2f,
	0x6f, 0x6a, 0x12, 0x35, 0x85, 0x8e, 0x61, 0x1b, 0xda, 0x78, 0x09, 0xfe, 0x5e, 0xb3, 0xad, 0x76,
	0x78, 0x05, 0xae, 0x22, 0x4e, 0x9d, 0x32, 0x9a, 0xc7, 0xac, 0xef, 0xf0, 0x1c, 0xec, 0x2f, 0xb5,
	0x36, 0x8a, 0x3e, 0xd3, 0x65, 0xfc, 0x08, 0xa7, 0x4c, 0xe4, 0xa2, 0xdc, 0x8a, 0x43, 0x6e, 0xa7,
	0xa6, 0x66, 0x53, 0x53, 0xf1, 0x3b, 0x04, 0x3d, 0xc7, 0x33, 0x27, 0x3e, 0x8e, 0x66, 0x1d, 0x88,
	0x36, 0xfb, 0x3f, 0x9a, 0x3d, 0x8d, 0xf6, 0x00, 0x27, 0xbf, 0x1e, 0x75, 0xba, 0x14, 0xfc, 0x82,
	0x13, 0xcf, 0xaa, 0x52, 0x51, 0x68, 0x45, 0x76, 0x12, 0x2c, 0x2e, 0x52, 0x73, 0x84, 0x91, 0x0d,
	0x36, 0xd7, 0xdf, 0xbc, 0x96, 0x8a, 0x16, 0x12, 0x82, 0xa7, 0x0d, 0xa7, 0x95, 0x90, 0xdb, 0x32,
	0x17, 0x78, 0x07, 0x8e, 0xfe, 0x53, 0xd8, 0x63, 0x46, 0x97, 0xba, 0x39, 0x1b, 0x8f, 0xda, 0x6a,
	0x17, 0x1f, 0xe1, 0x12, 0xbc, 0x9e, 0x15, 0x2f, 0x27, 0x22, 0x03, 0x06, 0xff, 0x4c, 0x0d, 0xec,
	0xc3, 0x35, 0xef, 0xe1, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x56, 0x34, 0xd7, 0x1f, 0x1d, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	//发送消息
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error)
	//接受消息
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveReply, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveReply, error) {
	out := new(ReceiveReply)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	//发送消息
	Send(context.Context, *SendRequest) (*SendReply, error)
	//接受消息
	Receive(context.Context, *ReceiveRequest) (*ReceiveReply, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) Send(ctx context.Context, req *SendRequest) (*SendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedChatServiceServer) Receive(ctx context.Context, req *ReceiveRequest) (*ReceiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatService_Send_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _ChatService_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
